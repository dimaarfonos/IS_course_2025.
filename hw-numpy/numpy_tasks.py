import numpy as np

def uniform_intervals(a, b, n):
    """1. —Å–æ–∑–¥–∞–µ—Ç numpy –º–∞—Å—Å–∏–≤ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç a –¥–æ b –Ω–∞ n –æ—Ç—Ä–µ–∑–∫–æ–≤."""
    return np.linspace(a, b, n)
    
    

def cyclic123_array(n): 
    """2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç numpy –º–∞—Å—Å–∏–≤ –¥–ª–∏–Ω—ã  3ùëõ , –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ —á–∏—Å–ª–∞–º–∏ 1, 2, 3, 1, 2, 3, 1...."""
    return np.tile([1, 2, 3], n)

def first_n_odd_number(n):
    """3. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–µ—Ä–≤—ã—Ö n –Ω–µ—á–µ—Ç–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª"""
    return np.arange(1, 2*n, 2)


def zeros_array_with_border(n):
    """4. –°–æ–∑–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω—É–ª–µ–π —Ä–∞–∑–º–µ—Ä–∞ n x n —Å "—Ä–∞–º–∫–æ–π" –∏–∑ –µ–¥–∏–Ω–∏—Ü –ø–æ –∫—Ä–∞—è–º."""
    array = np.zeros((n, n), dtype=int)
    array[0, :] = 1
    array[-1, :] = 1
    array[:, 0] = 1
    array[:, -1] = 1
    return array

def chess_board(n):
    """5. –°–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ n x n —Å —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–æ–π –∏–∑ –Ω—É–ª–µ–π –∏ –µ–¥–∏–Ω–∏—Ü"""
    return (np.indices((n, n)).sum(axis=0) + 1) % 2

def matrix_with_sum_index(n):
    """6. –°–æ–∑–¥–∞—ë—Ç ùëõ √ó ùëõ  –º–∞—Ç—Ä–∏—Ü—É —Å (ùëñ,ùëó)-—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º ùëñ+ùëó."""
    return np.fromfunction(lambda i, j: i + j, (n, n), dtype=int)

def cos_sin_as_two_rows(a, b, dx):
    """7. –í—ã—á–∏—Å–ª–∏—Ç–µ $cos(x)$ –∏ $sin(x)$ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ [a, b) —Å —à–∞–≥–æ–º dx, 
    –∞ –∑–∞—Ç–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ –æ–±–∞ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤. """
    x = np.arange(a, b, dx)
    return np.vstack((np.cos(x), np.sin(x)))

def compute_mean_rowssum_columnssum(A):
    """8. –î–ª—è numpy –º–∞—Å—Å–∏–≤–∞ A –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Å—É–º–º—É —Å—Ç—Ä–æ–∫ –∏ —Å—É–º–º—É —Å—Ç–æ–ª–±—Ü–æ–≤."""
    mean = np.mean(A)
    row_sum = np.sum(A, axis=0)
    column_sum = np.sum(A, axis=1)
    return mean, row_sum, column_sum

def sort_array_by_column(A, j):
    """ 9. –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ numpy –º–∞—Å—Å–∏–≤–∞ A –ø–æ j-–º—É —Å—Ç–æ–ª–±—Ü—É –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è."""
    
    sorted_A = A[A[:, j].argsort()]

    return sorted_A

def compute_integral(a, b, f, dx, method):
    """10. –°—á–∏—Ç–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª —Ñ—É–Ω–∫—Ü–∏–∏ f –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ [a, b] —Å —à–∞–≥–æ–º dx 3-–º—è –º–µ—Ç–æ–¥–∞–º–∏:  
    method == 'rectangular' - –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞   
    method == 'trapezoidal' - –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–π   
    method == 'simpson' - –º–µ—Ç–æ–¥–æ–º –°–∏–º–ø—Å–æ–Ω–∞  
    """
    n_intervals = int((b - a) / dx)
    x = np.linspace(a, b, n_intervals + 1)
    
    if method == 'rectangular':
        x_mid = x[:-1]  # –õ–µ–≤–∞—è —Ç–æ—á–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        return np.sum(f(x_mid)) * dx

    elif method == 'trapezoidal':
        y = f(x)
        return (y[0] + 2 * np.sum(y[1:-1]) + y[-1]) * dx / 2

    elif method == 'simpson':
        if n_intervals % 2 == 1:  # –Ω—É–∂–Ω–æ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç—Ä–µ–∑–∫–æ–≤ ‚Üí –Ω–µ—á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ—á–µ–∫
            x = np.linspace(a, b, n_intervals + 2)
            dx = (b - a) / (n_intervals + 1)
        
        y = f(x)
        return dx / 3 * (y[0] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-2:2]) + y[-1])

    else:
        raise ValueError("Unknown method. Use 'rectangular', 'trapezoidal' or 'simpson'.")
